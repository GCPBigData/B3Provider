<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlatFiles</name>
    </assembly>
    <members>
        <member name="T:FlatFiles.BooleanColumn">
            <summary>
            Represents a column containing boolean values.
            </summary>
        </member>
        <member name="M:FlatFiles.BooleanColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a BooleanColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.BooleanColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.BooleanColumn.TrueString">
            <summary>
            Gets or sets the value representing true.
            </summary>
        </member>
        <member name="P:FlatFiles.BooleanColumn.FalseString">
            <summary>
            Gets or sets the value representing false.
            </summary>
        </member>
        <member name="M:FlatFiles.BooleanColumn.Parse(System.String)">
            <summary>
            Parses the given value into its equivilent boolean value.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>True if the value equals the TrueString; otherwise, false.</returns>
        </member>
        <member name="M:FlatFiles.BooleanColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ByteArrayColumn">
            <summary>
            Represents a column of a byte[] values.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteArrayColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance instance of a ByteArrayColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.ByteArrayColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.ByteArrayColumn.Encoding">
            <summary>
            Gets or sets the encoding to use when parsing the value.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteArrayColumn.Parse(System.String)">
            <summary>
            Parses the given value as a byte array.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed byte array.</returns>
        </member>
        <member name="M:FlatFiles.ByteArrayColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ByteColumn">
            <summary>
            Represents a column of byte values.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ByteColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.ByteColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.ByteColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use to parse the value.
            </summary>
        </member>
        <member name="P:FlatFiles.ByteColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing the value.
            </summary>
        </member>
        <member name="P:FlatFiles.ByteColumn.OutputFormat">
            <summary>
            Gets or sets the formatting to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteColumn.Parse(System.String)">
            <summary>
            Parses the given value into a byte.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed byte value.</returns>
        </member>
        <member name="M:FlatFiles.ByteColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.CharArrayColumn">
            <summary>
            Represents a column of a char[] values.
            </summary>
        </member>
        <member name="M:FlatFiles.CharArrayColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance instance of a CharArrayColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.CharArrayColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.CharArrayColumn.Parse(System.String)">
            <summary>
            Parses the given value as a char array.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed char array.</returns>
        </member>
        <member name="M:FlatFiles.CharArrayColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.CharColumn">
            <summary>
            Represents a column of character values.
            </summary>
        </member>
        <member name="M:FlatFiles.CharColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a CharColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.CharColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.CharColumn.AllowTrailing">
            <summary>
            Gets or sets whether the parser should allow for trailing characters.
            </summary>
        </member>
        <member name="M:FlatFiles.CharColumn.Parse(System.String)">
            <summary>
            Parses the given value as a char.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed char.</returns>
        </member>
        <member name="M:FlatFiles.CharColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ColumnCollection">
            <summary>
            Holds the column definitions that make up a schema.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnCollection.#ctor">
            <summary>
            Initializes a new ColumnCollection.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column definition at the given index.
            </summary>
            <param name="index">The index of the column definition to get.</param>
            <returns>The column definition at the given index.</returns>
        </member>
        <member name="P:FlatFiles.ColumnCollection.Item(System.String)">
            <summary>
            Gets the column definition with the given name.
            </summary>
            <param name="columnName">The name of the column to get the definition for.</param>
            <returns>The column definition with the given name.</returns>
        </member>
        <member name="P:FlatFiles.ColumnCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnCollection.IgnoredCount">
            <summary>
            Gets the number of columns that are ignored.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnCollection.HandledCount">
            <summary>
            Gets the number of columns that are not ignored.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnCollection.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName">The name of the column to get the index for.</param>
            <returns>The index of the column with the given name -or- -1 if the column is not found.</returns>
        </member>
        <member name="M:FlatFiles.ColumnCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the column definitions in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:FlatFiles.IColumnDefinition">
            <summary>
            Defines a column that is part of a record schema.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.IsIgnored">
            <summary>
            Gets whether the value in this column is returned as a result.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.NullHandler">
            <summary>
            Gets or sets the null handler instance used to interpret null values.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.Preprocessor">
            <summary>
            Gets or sets a function used to preprocess input before trying to parse it.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.IColumnDefinition.Parse(System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:FlatFiles.IColumnDefinition.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ColumnDefinition">
            <summary>
            Defines a column that is part of a record schema.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ColumnDefinition.
            </summary>
            <param name="columnName">The name of the column to define.</param>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a ColumnDefinition.
            </summary>
            <param name="columnName">The name of the column to define.</param>
            <param name="isIgnored">Specifies whether the value in the column appears in the parsed record.</param>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.IsIgnored">
            <summary>
            Gets whether the value in this column is returned as a result.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.NullHandler">
            <summary>
            Gets or sets the null handler instance used to interpret null values.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.Preprocessor">
            <summary>
            Gets or sets a function used to preprocess input before trying to parse it.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.Parse(System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.TrimValue(System.String)">
            <summary>
            Removes any leading or trailing whitespace from the value.
            </summary>
            <param name="value">The value to trim.</param>
            <returns>The trimmed value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ConstantNullHandler">
            <summary>
            Uses a constant value to represent nulls in a flat file.
            </summary>
        </member>
        <member name="M:FlatFiles.ConstantNullHandler.#ctor(System.String)">
            <summary>
            Initiates a new instance of a ConstantNullHandler.
            </summary>
            <param name="value">The constant value to use.</param>
        </member>
        <member name="M:FlatFiles.ConstantNullHandler.For(System.String)">
            <summary>
            Creates a new NullHandler using the given value.
            </summary>
            <param name="value">The constant used to represent null in the flat file.</param>
            <returns>The created NullHandler.</returns>
        </member>
        <member name="M:FlatFiles.ConstantNullHandler.IsNullRepresentation(System.String)">
            <summary>
            Gets whether the given string should be interpreted as null.
            </summary>
            <param name="value">The value to inspect.</param>
            <returns>True if the value represents null; otherwise, false.</returns>
        </member>
        <member name="M:FlatFiles.ConstantNullHandler.GetNullRepresentation">
            <summary>
            Gets the value used to represent null when writing to a flat file.
            </summary>
            <returns>The string used to represent null in the flat file.</returns>
        </member>
        <member name="T:FlatFiles.DataTableExtensions">
            <summary>
            Provides extensions methods for populating a DataTable using flat files.
            </summary>
        </member>
        <member name="M:FlatFiles.DataTableExtensions.ReadFlatFile(System.Data.DataTable,FlatFiles.IReader)">
            <summary>
            Loads the contents returned by the given reader into the DataTable.
            </summary>
            <param name="table">The table to load the file contents into.</param>
            <param name="reader">The reader to use to extract the file schema and data.</param>
            <exception cref="T:System.ArgumentNullException">The table is null.</exception>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
        </member>
        <member name="M:FlatFiles.DataTableExtensions.WriteFlatFile(System.Data.DataTable,FlatFiles.IWriter)">
            <summary>
            Writes the data table contents to the writer.
            </summary>
            <param name="table">The table whose contents to write to the writer.</param>
            <param name="writer">The writer to write the values to.</param>
            <exception cref="T:System.ArgumentNullException">The table is null.</exception>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
        </member>
        <member name="T:FlatFiles.DateTimeColumn">
            <summary>
            Represents a column of DateTime values.
            </summary>
        </member>
        <member name="M:FlatFiles.DateTimeColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a DateTimeColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.InputFormat">
            <summary>
            Gets or sets the format string to use when parsing the date and time.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing the date and time.
            </summary>
        </member>
        <member name="M:FlatFiles.DateTimeColumn.Parse(System.String)">
            <summary>
            Parses the given value and returns a DateTime instance.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed DateTime instance.</returns>
        </member>
        <member name="M:FlatFiles.DateTimeColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.DecimalColumn">
            <summary>
            Represents a column containing decimals.
            </summary>
        </member>
        <member name="M:FlatFiles.DecimalColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of an DecimalColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DecimalColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.DecimalColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DecimalColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DecimalColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.DecimalColumn.Parse(System.String)">
            <summary>
            Parses the given value, returning a Decimal.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Decimal.</returns>
        </member>
        <member name="M:FlatFiles.DecimalColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.DefaultNullHandler">
            <summary>
            Interprets solid whitespace as representing null.
            </summary>
        </member>
        <member name="M:FlatFiles.DefaultNullHandler.IsNullRepresentation(System.String)">
            <summary>
            Gets whether the given string should be interpreted as null.
            </summary>
            <param name="value">The value to inspect.</param>
            <returns>True if the value represents null; otherwise, false.</returns>
        </member>
        <member name="M:FlatFiles.DefaultNullHandler.GetNullRepresentation">
            <summary>
            Gets the value used to represent null when writing to a flat file.
            </summary>
            <returns>The string used to represent null in the flat file.</returns>
        </member>
        <member name="T:FlatFiles.DoubleColumn">
            <summary>
            Represents a column containing doubles.
            </summary>
        </member>
        <member name="M:FlatFiles.DoubleColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of an DoubleColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DoubleColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.DoubleColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DoubleColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DoubleColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.DoubleColumn.Parse(System.String)">
            <summary>
            Parses the given value, returning a Double.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Double.</returns>
        </member>
        <member name="M:FlatFiles.DoubleColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.EnumColumn`1">
            <summary>
            Represents a column containing enumeration values.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
        </member>
        <member name="M:FlatFiles.EnumColumn`1.#ctor(System.String)">
            <summary>
            Initializes a new EnumColumn with the given name.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.EnumColumn`1.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.EnumColumn`1.Parser">
            <summary>
            Gets or sets the parser used to convert string values into enumeration values.
            </summary>
        </member>
        <member name="P:FlatFiles.EnumColumn`1.Formatter">
            <summary>
            Gets or sets the formatter used to convert enumeration values to string values.
            </summary>
        </member>
        <member name="M:FlatFiles.EnumColumn`1.Parse(System.String)">
            <summary>
            Parses the given value into its equivalent enum value.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The enum value that was parsed.</returns>
        </member>
        <member name="M:FlatFiles.EnumColumn`1.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.FixedAlignment">
            <summary>
            Gets the alignment of a fixed width column.
            </summary>
        </member>
        <member name="F:FlatFiles.FixedAlignment.LeftAligned">
            <summary>
            The content in the column is left aligned.
            </summary>
        </member>
        <member name="F:FlatFiles.FixedAlignment.RightAligned">
            <summary>
            The content in the column is right aligned.
            </summary>
        </member>
        <member name="T:FlatFiles.FixedLengthComplexColumn">
            <summary>
            Represents a string column that has contains multiple, nested values
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.#ctor(System.String,FlatFiles.FixedLengthSchema)">
            <summary>
            Initializes a new FixedLengthComplexColumn with the given schema and default options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="schema">The schema of the data embedded in the column.</param>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.#ctor(System.String,FlatFiles.FixedLengthSchema,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthComplexColumn with the given schema and options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="schema">The schema of the data embedded in the column.</param>
            <param name="options">The options to use when parsing the embedded data.</param>
        </member>
        <member name="P:FlatFiles.FixedLengthComplexColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthComplexColumn.Options">
            <summary>
            Gets or sets the options used to read/write the records.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.Parse(System.String)">
            <summary>
            Extracts a single record from the embedded data.
            </summary>
            <param name="value">The value containing the embedded data.</param>
            <returns>
            An object array containing the values read from the embedded data -or- null if there is no embedded data.
            </returns>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.Format(System.Object)">
            <summary>
            Formats the given object array into an embedded record.
            </summary>
            <param name="value">The object array containing the values of the embedded record.</param>
            <returns>A formatted string containing the embedded data.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthOptions">
            <summary>
            Holds configuration settings for the FixedLengthParser class.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthOptions.#ctor">
            <summary>
            Initializes a new instance of a FixedLengthParserOptions.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.FillCharacter">
            <summary>
            Gets or sets the character used to buffer values in a column.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.RecordSeparator">
            <summary>
            Gets or sets the string that indicates the end of a record.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.IsFirstRecordHeader">
            <summary>
            Gets or sets whether the first record in the source holds header information and should be skipped.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.UnpartitionedRecordFilter">
            <summary>
            Gets or sets a filter to use to skip records prior to record being partitioned.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.PartitionedRecordFilter">
            <summary>
            Gets or sets a filter to use to skip records after the record is partitioned.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.TruncationPolicy">
            <summary>
            Gets or sets the default overflow truncation policy to use
            when a value exceeds the maximum length of its column.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthOptions.Clone">
            <summary>
            Duplicates the options.
            </summary>
            <returns>The new options.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthReader">
            <summary>
            Extracts records from a file that has value in fixed-length columns.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.#ctor(System.IO.TextReader,FlatFiles.FixedLengthSchema,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthReader with the given schema.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="schema">The schema of the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.GetSchema">
            <summary>
            Gets the schema being used by the parser.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.Read">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was parsed; otherwise, false if all files are read.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.Skip">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if all records are read.</returns>
            <remarks>The previously parsed values remain available.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.GetValues">
            <summary>
            Gets the values for the current record.
            </summary>
            <returns>The values of the current record.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthSchema">
            <summary>
            Defines the expected format of a fixed-length file record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchema.#ctor">
            <summary>
            Initializes a new instance of a FixedLengthSchema.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchema.AddColumn(FlatFiles.IColumnDefinition,FlatFiles.Window)">
            <summary>
            Adds a column to the schema, using the given definition to define it.
            </summary>
            <param name="definition">The definition of the column to add.</param>
            <param name="window">Describes the column</param>
            <returns>The current schema.</returns>
        </member>
        <member name="P:FlatFiles.FixedLengthSchema.Windows">
            <summary>
            Gets the column widths.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthSchema.TotalWidth">
            <summary>
            Gets the total width of all columns.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchema.ParseValues(System.String[])">
            <summary>
            Parses the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="values">The values to parse.</param>
            <returns>The parsed objects.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthSchema.FormatValues(System.Object[])">
            <summary>
            Formats the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="values">The values to format.</param>
            <returns>The formatted values.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthWriter">
            <summary>
            Builds textual representations of data by giving each field a fixed width.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.#ctor(System.IO.TextWriter,FlatFiles.FixedLengthSchema,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthBuilder with the given schema.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="schema">The schema of the fixed-length document.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.GetSchema">
            <summary>
            Gets the schema used to build the output.
            </summary>
            <returns>The schema used to build the output.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.Write(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <exception cref="T:System.ArgumentNullException">The values array is null.</exception>
        </member>
        <member name="T:FlatFiles.FlatFileException">
            <summary>
            Represents an error that occurred while parsing a stream.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of a FlatFileException, recording which record caused the error.
            </summary>
            <param name="message">A message describing the cause of the error.</param>
            <param name="recordNumber">The position of the record with the invalid format.</param>
        </member>
        <member name="M:FlatFiles.FlatFileException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of a FlatFileException, recording which record caused the error.
            </summary>
            <param name="message">A message describing the cause of the error.</param>
            <param name="recordNumber">The position of the record with the invalid format.</param>
            <param name="innerException">An inner exception containing the cause of the underlying error.</param>
        </member>
        <member name="M:FlatFiles.FlatFileException.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of a FlatFileException, recording which record caused the error.
            </summary>
            <param name="recordNumber">The position of the record with the invalid format.</param>
            <param name="innerException">An inner exception containing the cause of the underlying error.</param>
        </member>
        <member name="M:FlatFiles.FlatFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of a FlatFileException.
            </summary>
            <param name="message">A message describing the cause of the error.</param>
            <param name="innerException">An inner exception containing the cause of the underlying error.</param>
        </member>
        <member name="T:FlatFiles.FlatFileReader">
            <summary>
            Reads records from a flat file.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileReader.#ctor(FlatFiles.IReader)">
            <summary>
            Initializes a new instance of a FlatFileParser.
            </summary>
            <param name="reader">The reader to use to parse the underlying file.</param>
            <exception cref="T:System.ArgumentNullException">The parser is null.</exception>
        </member>
        <member name="M:FlatFiles.FlatFileReader.Finalize">
            <summary>
            Finalizes the FlatFileReader.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileReader.Dispose">
            <summary>
            Releases any resources being held by the reader.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileReader.Close">
            <summary>
            Closes the underlying record set.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetSchemaTable">
            <summary>
            Gets a DataTable containing the schema of the data.
            </summary>
            <returns>The Schema DataTable.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileReader.IsClosed">
            <summary>
            Gets whether the underlying data source is closed.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileReader.Read">
            <summary>
            Advances the reader to the next record.
            </summary>
            <returns>True if there was another record; otherwise, false.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileReader.FieldCount">
            <summary>
            Gets the number of fields in the current record.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The boolean value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetByte(System.Int32)">
            <summary>
            Gets the byte value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The byte value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies the bytes from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <param name="fieldOffset">The offset into the byte array to start copying.</param>
            <param name="buffer">An array to copy the bytes to.</param>
            <param name="bufferoffset">The offset into the given buffer to start copying.</param>
            <param name="length">The maximum number of items to copy into the given buffer.</param>
            <returns>The number of bytes copied to the buffer.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetChar(System.Int32)">
            <summary>
            Gets the char value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The char value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the chars from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <param name="fieldoffset">The offset into the char array to start copying.</param>
            <param name="buffer">An array to copy the chars to.</param>
            <param name="bufferoffset">The offset into the given buffer to start copying.</param>
            <param name="length">The maximum number of items to copy into the given buffer.</param>
            <returns>The number of chars copied to the buffer.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the type name of the value of the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The type name.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetDateTime(System.Int32)">
            <summary>
            Gets the DateTime value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The DateTime value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The decimal value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetDouble(System.Int32)">
            <summary>
            Gets the double value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The double value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The type of the value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetFloat(System.Int32)">
            <summary>
            Gets the float value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The float value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetGuid(System.Int32)">
            <summary>
            Gets the GUID from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The GUID at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetInt16(System.Int32)">
            <summary>
            Gets the short value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The short value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetInt32(System.Int32)">
            <summary>
            Gets the int value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The int value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetInt64(System.Int32)">
            <summary>
            Gets the long value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The long value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column at the given index.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The name of the column at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="name">The name of the column..</param>
            <returns>The index of the column with the given name.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetString(System.Int32)">
            <summary>
            Gets the string from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The string at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetValue(System.Int32)">
            <summary>
            Gets the value as an object from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The value as an object at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.GetValues(System.Object[])">
            <summary>
            Copies the values from the current record to the given array.
            </summary>
            <param name="values">The array to copy the values to.</param>
            <returns>The number of values copied to the given array.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileReader.IsDBNull(System.Int32)">
            <summary>
            Gets whether the value at given index is null for the current record.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>True if the value is null; otherwise, false.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileReader.Item(System.String)">
            <summary>
            Gets the value from the current record in the column with the given name.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value in the column with the given name.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileReader.Item(System.Int32)">
            <summary>
            Gets the value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="T:FlatFiles.GuidColumn">
            <summary>
            Represents a column of Guid values.
            </summary>
        </member>
        <member name="M:FlatFiles.GuidColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a GuidColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.GuidColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.GuidColumn.InputFormat">
            <summary>
            Gets or sets the format string to use when parsing the Guid.
            </summary>
        </member>
        <member name="P:FlatFiles.GuidColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.GuidColumn.Parse(System.String)">
            <summary>
            Parses the given value and returns a Guid instance.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Guid.</returns>
        </member>
        <member name="M:FlatFiles.GuidColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.IgnoredColumn">
            <summary>
            Represents a column that should be ignored when reading a document and used as a placeholder
            when writing a document.
            </summary>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.#ctor">
            <summary>
            Initializes a new IgnoredColumn.
            </summary>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.#ctor(System.String)">
            <summary>
            Initializes a new IgnoredColumn with a header name.
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:FlatFiles.IgnoredColumn.ColumnType">
            <summary>
            Gets the type of data in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.Parse(System.String)">
            <summary>
            Ignores the values that was parsed from the document.
            </summary>
            <param name="value">The value that was parsed from the document.</param>
            <returns>A null.</returns>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.Format(System.Object)">
            <summary>
            Returns null so nothing is written to the document.
            </summary>
            <param name="value">The value that needs written to the document.</param>
            <returns>A null.</returns>
        </member>
        <member name="T:FlatFiles.Int16Column">
            <summary>
            Represents a column containing 16-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.Int16Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an Int16Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.Int16Column.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Int16Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int16Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int16Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.Int16Column.Parse(System.String)">
            <summary>
            Parses the given value, returning an Int16.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Int16.</returns>
        </member>
        <member name="M:FlatFiles.Int16Column.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Int32Column">
            <summary>
            Represents a column containing 32-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.Int32Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an Int32Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.Int32Column.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Int32Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int32Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int32Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.Int32Column.Parse(System.String)">
            <summary>
            Parses the given value, returning an Int32.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Int32.</returns>
        </member>
        <member name="M:FlatFiles.Int32Column.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Int64Column">
            <summary>
            Represents a column containing 64-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.Int64Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an Int64Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.Int64Column.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Int64Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int64Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int64Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.Int64Column.Parse(System.String)">
            <summary>
            Parses the given value, returning an Int64.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Int64.</returns>
        </member>
        <member name="M:FlatFiles.Int64Column.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.INullHandler">
            <summary>
            Specifies which value represents nulls within a file.
            </summary>
        </member>
        <member name="M:FlatFiles.INullHandler.IsNullRepresentation(System.String)">
            <summary>
            Gets whether the given string should be interpreted as null.
            </summary>
            <param name="value">The value to inspect.</param>
            <returns>True if the value represents null; otherwise, false.</returns>
        </member>
        <member name="M:FlatFiles.INullHandler.GetNullRepresentation">
            <summary>
            Gets the value used to represent null when writing to a flat file.
            </summary>
            <returns>The string used to represent null in the flat file.</returns>
        </member>
        <member name="T:FlatFiles.IReader">
            <summary>
            Defines the operations that a fixed-length reader must support.
            </summary>
        </member>
        <member name="M:FlatFiles.IReader.GetSchema">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.IReader.Read">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was read; otherwise, false if the end of file was reached.</returns>
        </member>
        <member name="M:FlatFiles.IReader.Skip">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if the end of the file was reached.</returns>
        </member>
        <member name="M:FlatFiles.IReader.GetValues">
            <summary>
            Gets the values of the current record.
            </summary>
            <returns>The value of the current record.</returns>
        </member>
        <member name="T:FlatFiles.IWriter">
            <summary>
            Defines the operations that a writer must support.
            </summary>
        </member>
        <member name="M:FlatFiles.IWriter.GetSchema">
            <summary>
            Gets the schema being used by the builder to create the textual representation.
            </summary>
            <returns>The schema being used by the builder to create the textual representation.</returns>
        </member>
        <member name="M:FlatFiles.IWriter.Write(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <returns>The textual representation of the given values.</returns>
        </member>
        <member name="T:FlatFiles.OverflowTruncationPolicy">
            <summary>
            Specifies how to truncate columns when the data exceeds to maximum width.
            </summary>
        </member>
        <member name="F:FlatFiles.OverflowTruncationPolicy.TruncateLeading">
            <summary>
            Keep the end of the data by removing the leading text.
            </summary>
        </member>
        <member name="F:FlatFiles.OverflowTruncationPolicy.TruncateTrailing">
            <summary>
            Keep the front of the data by removing the trailing text.
            </summary>
        </member>
        <member name="T:FlatFiles.SByteColumn">
            <summary>
            Represents a column of signed byte values.
            </summary>
        </member>
        <member name="M:FlatFiles.SByteColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a SByteColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.SByteColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.SByteColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use to parse the value.
            </summary>
        </member>
        <member name="P:FlatFiles.SByteColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing the value.
            </summary>
        </member>
        <member name="P:FlatFiles.SByteColumn.OutputFormat">
            <summary>
            Gets or sets the formatting to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.SByteColumn.Parse(System.String)">
            <summary>
            Parses the given value into a signed byte.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed signed byte value.</returns>
        </member>
        <member name="M:FlatFiles.SByteColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ISchema">
            <summary>
            Defines the expected format of a record in a file.
            </summary>
        </member>
        <member name="P:FlatFiles.ISchema.ColumnDefinitions">
            <summary>
            Gets the column definitions that make up the schema.
            </summary>
        </member>
        <member name="M:FlatFiles.ISchema.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName">The name of the column to get the index for.</param>
            <returns>The index of the column with the given name -or- -1 if the name is not found.</returns>
        </member>
        <member name="T:FlatFiles.Schema">
            <summary>
            Defines the expected format of a record in a file.
            </summary>
        </member>
        <member name="M:FlatFiles.Schema.#ctor">
            <summary>
            Initializes a new instance of a Schema.
            </summary>
        </member>
        <member name="P:FlatFiles.Schema.ColumnDefinitions">
            <summary>
            Gets the column definitions that make up the schema.
            </summary>
        </member>
        <member name="M:FlatFiles.Schema.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName">The name of the column to get the index for.</param>
            <returns>The index of the column with the given name -or- -1 if the name is not found.</returns>
        </member>
        <member name="M:FlatFiles.Schema.AddColumnBase(FlatFiles.IColumnDefinition)">
            <summary>
            Adds a column to the schema, using the given definition to define it.
            </summary>
            <param name="definition">The definition of the column to add.</param>
            <returns>The current schema.</returns>
        </member>
        <member name="M:FlatFiles.Schema.ParseValuesBase(System.String[])">
            <summary>
            Parses the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="values">The values to parse.</param>
            <returns>The parsed objects.</returns>
        </member>
        <member name="M:FlatFiles.Schema.FormatValuesBase(System.Object[])">
            <summary>
            Formats the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="values">The values to format.</param>
            <returns>The formatted values.</returns>
        </member>
        <member name="T:FlatFiles.SeparatedValueComplexColumn">
            <summary>
            Represents a string column that has contains multiple, nested values
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueComplexColumn.#ctor(System.String)">
            <summary>
            Initializes a new SeparatedValueComplexColumn with no schema or options.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="M:FlatFiles.SeparatedValueComplexColumn.#ctor(System.String,FlatFiles.SeparatedValueSchema)">
            <summary>
            Initializes a new SeparatedValueComplexColumn with the given schema and default options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="schema">The schema of the data embedded in the column.</param>
        </member>
        <member name="M:FlatFiles.SeparatedValueComplexColumn.#ctor(System.String,FlatFiles.SeparatedValueOptions)">
            <summary>
            Initializes a new SeparatedValueComplexColumn with the given options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="options">The options to use when parsing the embedded data.</param>
        </member>
        <member name="M:FlatFiles.SeparatedValueComplexColumn.#ctor(System.String,FlatFiles.SeparatedValueSchema,FlatFiles.SeparatedValueOptions)">
            <summary>
            Initializes a new SeparatedValueComplexColumn with the given schema and options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="schema">The schema of the data embedded in the column.</param>
            <param name="options">The options to use when parsing the embedded data.</param>
        </member>
        <member name="P:FlatFiles.SeparatedValueComplexColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueComplexColumn.Options">
            <summary>
            Gets or sets the separated value options.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueComplexColumn.Parse(System.String)">
            <summary>
            Extracts a single record from the embedded data.
            </summary>
            <param name="value">The value containing the embedded data.</param>
            <returns>
            An object array containing the values read from the embedded data -or- null if there is no embedded data.
            </returns>
        </member>
        <member name="M:FlatFiles.SeparatedValueComplexColumn.Format(System.Object)">
            <summary>
            Formats the given object array into an embedded record.
            </summary>
            <param name="value">The object array containing the values of the embedded record.</param>
            <returns>A formatted string containing the embedded data.</returns>
        </member>
        <member name="T:FlatFiles.SeparatedValueOptions">
            <summary>
            Holds configuration options for the SeparatedValueParser.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueOptions.#ctor">
            <summary>
            Initializes a new instance of a SeparatedValueParserOptions.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueOptions.Separator">
            <summary>
            Gets or sets the separator used to separate the columns.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueOptions.RecordSeparator">
            <summary>
            Gets or sets the separator used to separate the records.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueOptions.Quote">
            <summary>
            Gets or sets the character used to quote records containing special characters.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueOptions.IsFirstRecordSchema">
            <summary>
            Gets or sets whether the first record is the schema.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueOptions.PreserveWhiteSpace">
            <summary>
            Gets or sets whether leading and trailing whitespace should be preserved when reading.
            </summary>
        </member>
        <member name="P:FlatFiles.SeparatedValueOptions.PartitionedRecordFilter">
            <summary>
            Gets or sets a filter to use to skip records.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueOptions.Clone">
            <summary>
            Duplicates the options.
            </summary>
            <returns>The new options.</returns>
        </member>
        <member name="T:FlatFiles.SeparatedValueReader">
            <summary>
            Extracts records from a file that has values separated by a separator token.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueReader.#ctor(System.IO.TextReader,FlatFiles.SeparatedValueOptions)">
            <summary>
            Initializes a new SeparatedValueReader with no schema.
            </summary>
            <param name="reader">A reader over the separated value document.</param>
            <param name="options">The options controlling how the separated value document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
        </member>
        <member name="M:FlatFiles.SeparatedValueReader.#ctor(System.IO.TextReader,FlatFiles.SeparatedValueSchema,FlatFiles.SeparatedValueOptions)">
            <summary>
            Initializes a new SeparatedValueReader with the given schema.
            </summary>
            <param name="reader">A reader over the separated value document.</param>
            <param name="schema">The schema of the separated value document.</param>
            <param name="options">The options controlling how the separated value document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.SeparatedValueReader.GetSchema">
            <summary>
            Gets the names of the columns found in the file.
            </summary>
            <returns>The names.</returns>
        </member>
        <member name="M:FlatFiles.SeparatedValueReader.Read">
            <summary>
            Attempts to read the next record from the stream.
            </summary>
            <returns>True if the next record was read or false if all records have been read.</returns>
        </member>
        <member name="M:FlatFiles.SeparatedValueReader.Skip">
            <summary>
            Attempts to skip the next record from the stream.
            </summary>
            <returns>True if the next record was skipped or false if all records have been read.</returns>
            <remarks>The previously parsed values remain available.</remarks>
        </member>
        <member name="M:FlatFiles.SeparatedValueReader.GetValues">
            <summary>
            Gets the values for the current record.
            </summary>
            <returns>The values of the current record.</returns>
        </member>
        <member name="T:FlatFiles.SeparatedValueSchema">
            <summary>
            Defines the expected format of a record in a file.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueSchema.#ctor">
            <summary>
            Initializes a new instance of a Schema.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueSchema.AddColumn(FlatFiles.IColumnDefinition)">
            <summary>
            Adds a column to the schema, using the given definition to define it.
            </summary>
            <param name="definition">The definition of the column to add.</param>
            <returns>The current schema.</returns>
        </member>
        <member name="M:FlatFiles.SeparatedValueSchema.ParseValues(System.String[])">
            <summary>
            Parses the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="values">The values to parse.</param>
            <returns>The parsed objects.</returns>
        </member>
        <member name="M:FlatFiles.SeparatedValueSchema.FormatValues(System.Object[])">
            <summary>
            Formats the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="values">The values to format.</param>
            <returns>The formatted values.</returns>
        </member>
        <member name="T:FlatFiles.SeparatedValueSyntaxException">
            <summary>
            Represents an error that occurred while parsing a separated value stream.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueSyntaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a SeparatedValueSyntaxException.
            </summary>
            <param name="message">The details of the syntax error.</param>
        </member>
        <member name="T:FlatFiles.SeparatedValueWriter">
            <summary>
            Builds textual representations of data by separating fields with a delimiter.
            </summary>
        </member>
        <member name="M:FlatFiles.SeparatedValueWriter.#ctor(System.IO.TextWriter,FlatFiles.SeparatedValueOptions)">
            <summary>
            Initializes a new SeparatedValueWriter without a schema.
            </summary>
            <param name="writer">A writer over the separated value document.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
        </member>
        <member name="M:FlatFiles.SeparatedValueWriter.#ctor(System.IO.TextWriter,FlatFiles.SeparatedValueSchema,FlatFiles.SeparatedValueOptions)">
            <summary>
            Initializes a new SeparatedValueWriter with the given schema.
            </summary>
            <param name="writer">A writer over the separated value document.</param>
            <param name="schema">The schema of the separated value document.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.SeparatedValueWriter.GetSchema">
            <summary>
            Gets the schema used to build the output.
            </summary>
            <returns>The schema used to build the output.</returns>
        </member>
        <member name="M:FlatFiles.SeparatedValueWriter.Write(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <exception cref="T:System.ArgumentNullException">The values array is null.</exception>
        </member>
        <member name="T:FlatFiles.SingleColumn">
            <summary>
            Represents a column containing singles.
            </summary>
        </member>
        <member name="M:FlatFiles.SingleColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of an SingleColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.SingleColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.SingleColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.SingleColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.SingleColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.SingleColumn.Parse(System.String)">
            <summary>
            Parses the given value, returning a Single.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed Single.</returns>
        </member>
        <member name="M:FlatFiles.SingleColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.StringColumn">
            <summary>
            Represents a column containing strings.
            </summary>
        </member>
        <member name="M:FlatFiles.StringColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a StringColumnDefinition.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.StringColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.StringColumn.Trim">
            <summary>
            Gets or sets whether the value should be trimmed.
            </summary>
        </member>
        <member name="M:FlatFiles.StringColumn.Parse(System.String)">
            <summary>
            Returns the given value trimmed.
            </summary>
            <param name="value">The value to trim.</param>
            <returns>The value trimmed.</returns>
        </member>
        <member name="M:FlatFiles.StringColumn.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.UInt16Column">
            <summary>
            Represents a column containing unsigned 16-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt16Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an UInt16Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.UInt16Column.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt16Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt16Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt16Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt16Column.Parse(System.String)">
            <summary>
            Parses the given value, returning an UInt16.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed UInt16.</returns>
        </member>
        <member name="M:FlatFiles.UInt16Column.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.UInt32Column">
            <summary>
            Represents a column containing unsigned 32-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt32Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an UInt32Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.UInt32Column.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt32Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt32Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt32Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt32Column.Parse(System.String)">
            <summary>
            Parses the given value, returning an UInt32.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed UInt32.</returns>
        </member>
        <member name="M:FlatFiles.UInt32Column.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.UInt64Column">
            <summary>
            Represents a column containing unsigned 64-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt64Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an UInt64Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.UInt64Column.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt64Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt64Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt64Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt64Column.Parse(System.String)">
            <summary>
            Parses the given value, returning an UInt64.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The parsed UInt64.</returns>
        </member>
        <member name="M:FlatFiles.UInt64Column.Format(System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Window">
            <summary>
            Defines the location and width of a column in a fixed-length record.
            </summary>
        </member>
        <member name="M:FlatFiles.Window.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a Window.
            </summary>
            <param name="width">The maximum possible width of the column.</param>
        </member>
        <member name="P:FlatFiles.Window.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Window.Alignment">
            <summary>
            Gets or sets the alignment of the value in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Window.FillCharacter">
            <summary>
            Gets or sets the character that is used fill the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Window.TruncationPolicy">
            <summary>
            Gets or sets the truncation policy in case there is an overflow.
            A null policy specifies that the default truncation policy of the writer will be used.
            </summary>
        </member>
        <member name="M:FlatFiles.Window.op_Implicit(System.Int32)~FlatFiles.Window">
            <summary>
            Implicitly creates a window from a width.
            </summary>
            <param name="width">The width to create a window for.</param>
            <returns>The new window.</returns>
        </member>
        <member name="T:FlatFiles.WindowCollection">
            <summary>
            Holds the column windows that make up a schema.
            </summary>
        </member>
        <member name="M:FlatFiles.WindowCollection.#ctor(System.Collections.Generic.List{FlatFiles.Window})">
            <summary>
            Initializes a new WindowCollection.
            </summary>
            <param name="windows">The windows making up the collection.</param>
        </member>
        <member name="P:FlatFiles.WindowCollection.Item(System.Int32)">
            <summary>
            Gets the window at the given index.
            </summary>
            <param name="index">The index of the window to get.</param>
            <returns>The window at the given index.</returns>
        </member>
        <member name="P:FlatFiles.WindowCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
        </member>
        <member name="M:FlatFiles.WindowCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the column definitions in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:FlatFiles.Resources.SharedResources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.BadPropertySelector">
            <summary>
               Looks up a localized string similar to The property selector did not select a property..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.BlankColumnName">
            <summary>
               Looks up a localized string similar to An attempt was made to define a column with a null or blank name..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.DuplicateColumnName">
            <summary>
               Looks up a localized string similar to An attempt was made to add a column to a schema where the same name already exists..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.EmptyRecordSeparator">
            <summary>
               Looks up a localized string similar to The record separator cannot be null or empty..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.EmptySeparator">
            <summary>
               Looks up a localized string similar to The column separator cannot be null or empty..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.FixedLengthRecordTooShort">
            <summary>
               Looks up a localized string similar to The record did not meet the length requirements specified in the schema. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.InvalidAlignment">
            <summary>
               Looks up a localized string similar to Encountered an invalid fixed width column alignment..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.InvalidColumnConversion">
            <summary>
               Looks up a localized string similar to Failed to convert &apos;{0}&apos; to &apos;{1}&apos;. Column: {2}, Position: {3}..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.InvalidColumnWidth">
            <summary>
               Looks up a localized string similar to An attempt was made to define a column with a negative width..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.InvalidRecordConversion">
            <summary>
               Looks up a localized string similar to Encountered an invalid conversion while processing the record. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.InvalidRecordFormatNumber">
            <summary>
               Looks up a localized string similar to Encountered an invalid record format. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.InvalidTruncationPolicy">
            <summary>
               Looks up a localized string similar to Encountered an invalid overflow truncation policy..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.NoMoreRecords">
            <summary>
               Looks up a localized string similar to An attempt to view values was made after all of the records were read..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.NotEnumType">
            <summary>
               Looks up a localized string similar to The type provided is not a an enumeration type..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.ReadingWithErrors">
            <summary>
               Looks up a localized string similar to An attempt was made to work with a parser after an invalid record was encountered..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.ReadNotCalled">
            <summary>
               Looks up a localized string similar to An attempt to view values was made before reading the first record..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.SameSeparator">
            <summary>
               Looks up a localized string similar to The column and record separator are the same string..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.SchemaNotDefined">
            <summary>
               Looks up a localized string similar to An attempt was made to retrieve the schema when none was extracted or provided..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.SeparatedValueRecordWrongNumberOfColumns">
            <summary>
               Looks up a localized string similar to The record did not have the number of columns specified in the schema. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.UnmatchedQuote">
            <summary>
               Looks up a localized string similar to A syntax error was encountered: Unmatched quote..
            </summary>
        </member>
        <member name="P:FlatFiles.Resources.SharedResources.WrongNumberOfValues">
            <summary>
               Looks up a localized string similar to The wrong number of values were passed..
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.IBooleanPropertyMapping">
            <summary>
            Represents the mapping from a type property to a Boolean column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.TrueString(System.String)">
            <summary>
            Sets the value used to represent true.
            </summary>
            <param name="value">The value used to represent true.</param>
            <returns>The property mapping for futher configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.FalseString(System.String)">
            <summary>
            Sets the value used to represent false.
            </summary>
            <param name="value">The value used to represent false.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IByteArrayPropertyMapping">
            <summary>
            Represents the mapping from a type property to a byte array column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.Encoding(System.Text.Encoding)">
            <summary>
            Sets the encoding to use to read and write the column.
            </summary>
            <param name="encoding">The encoding to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IBytePropertyMapping">
            <summary>
            Represents the mapping from a type property to a byte column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ICharArrayPropertyMapping">
            <summary>
            Represents the mapping from a type property to a char array column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ICharPropertyMapping">
            <summary>
            Represents the mapping from a type property to a char column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharPropertyMapping.AllowTrailing(System.Boolean)">
            <summary>
            Sets whether the parser should ignore extra characters.
            </summary>
            <param name="allow">True if the parser should ignore extra characters -or- false, if an error should occur.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDateTimePropertyMapping">
            <summary>
            Represents the mapping from a type property to a DateTime column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.InputFormat(System.String)">
            <summary>
            Sets the date/time format the input is expected to be in.
            </summary>
            <param name="format">The format to expect.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the date/time format to use for output.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use when reading and writing date/times.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDecimalPropertyMapping">
            <summary>
            Represents the mapping from a type property to a decimal column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDoublePropertyMapping">
            <summary>
            Represents the mapping from a type property to a double column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IEnumPropertyMapping`1">
            <summary>
            Represents the mapping from a type property to an enum column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.Parser(System.Func{System.String,`0})">
            <summary>
            Sets the parser to use to convert from a string to an enum.
            </summary>
            <param name="parser">The parsing function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.Formatter(System.Func{`0,System.String})">
            <summary>
            Sets the formatter to use to convert from an enum to a string.
            </summary>
            <param name="formatter">The formatting function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping">
            <summary>
            Represents the mapping from a type property to an object.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.WithOptions(FlatFiles.FixedLengthOptions)">
            <summary>
            Sets the options to use when reading/writing the complex type.
            </summary>
            <param name="options">The options to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.FixedLengthTypeMapper">
            <summary>
            Provides methods for creating type mappers.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapper.Define``1">
            <summary>
            Creates an object that can be used to configure the mapping to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapper.Define``1(System.Func{``0})">
            <summary>
            Creates an object that can be used to configure the mapping to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <param name="factory">A method to call when creating a new entity.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1">
            <summary>
            Supports configuration for mapping between entity properties and flat file columns.
            </summary>
            <typeparam name="TEntity">The type of the entity being mapped.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.GetSchema">
            <summary>
            Gets the schema defined by the current configuration.
            </summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char[]}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.ISeparatedValueTypeMapper{``0},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="property">An expression tha returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="property">An expression tha returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="property">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Ignored(FlatFiles.Window)">
            <summary>
            Specifies that the next column is ignored and returns an object for configuration.
            </summary>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the mapping.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1">
            <summary>
            Supports configuring reading to and writing from flat files for a type.
            </summary>
            <typeparam name="TEntity">The type of the entity read and written.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.Read(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Reads the entities from the given reader.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <returns>The entities that are extracted from the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.GetReader(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed reader to read entities from the underlying document.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <returns>A typed reader.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},FlatFiles.FixedLengthOptions)">
            <summary>
            Writes the given entities to the given writer.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="entities">The entities to write to the document.</param>
            <param name="options">The options controlling how the separated value document is written.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.GetWriter(System.IO.TextWriter,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed writer to write entities to the underlying document.
            </summary>
            <param name="writer">The writer over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is written.</param>
            <returns>A typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IGuidPropertyMapping">
            <summary>
            Represents the mapping from a type property to a Guid column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.InputFormat(System.String)">
            <summary>
            Sets the format to use when reading input.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the format to use when writing output.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="T:FlatFiles.TypeMapping.IIgnoredMapping">
            <summary>
            Represents the mapping from a type property to a Boolean column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IInt16PropertyMapping">
            <summary>
            Represents the mapping from a type property to a short column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IInt32PropertyMapping">
            <summary>
            Represents the mapping from a type property to a int column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IInt64PropertyMapping">
            <summary>
            Represents the mapping from a type property to a long column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IPropertyMapping">
            <summary>
            Represents the mapping from a type property to a column.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IPropertyMapping.Property">
            <summary>
            Gets the property that is mapped to.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IPropertyMapping.ColumnDefinition">
            <summary>
            Gets the column that is mapped to. 
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISBytePropertyMapping">
            <summary>
            Represents the mapping from a type property to a signed byte column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISeparatedValueComplexPropertyMapping">
            <summary>
            Represents the mapping from a type property to an object.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueComplexPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueComplexPropertyMapping.WithOptions(FlatFiles.SeparatedValueOptions)">
            <summary>
            Sets the options to use when reading/writing the complex type.
            </summary>
            <param name="options">The options to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueComplexPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueComplexPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueComplexPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.SeparatedValueTypeMapper">
            <summary>
            Provides methods for creating type mappers.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.SeparatedValueTypeMapper.Define``1">
            <summary>
            Creates an object that can be used to configure the mapping to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.SeparatedValueTypeMapper.Define``1(System.Func{``0})">
            <summary>
            Creates an object that can be used to configure the mapping to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <param name="factory">A method to call when creating a new entity.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1">
            <summary>
            Supports configuration for mapping between entity properties and flat file columns.
            </summary>
            <typeparam name="TEntity">The type of the entity being mapped.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.GetSchema">
            <summary>
            Gets the schema defined by the current configuration.
            </summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char[]}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.ISeparatedValueTypeMapper{``0})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="property">An expression tha returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="property">An expression that returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="property">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeConfiguration`1.Ignored">
            <summary>
            Specifies that the next column is ignored and returns an object for configuration.
            </summary>
            <returns>An object to configure the mapping.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISeparatedValueTypeMapper`1">
            <summary>
            Supports configuring reading to and writing from flat files for a type.
            </summary>
            <typeparam name="TEntity">The type of the entity read and written.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeMapper`1.Read(System.IO.TextReader,FlatFiles.SeparatedValueOptions)">
            <summary>
            Reads the entities from the given reader.
            </summary>
            <param name="reader">A reader over the separated value document.</param>
            <param name="options">The options controlling how the separated value document is read.</param>
            <returns>The entities that are extracted from the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeMapper`1.GetReader(System.IO.TextReader,FlatFiles.SeparatedValueOptions)">
            <summary>
            Gets a typed reader to read entities from the underlying document.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the separated value document is read.</param>
            <returns>A typed reader.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeMapper`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},FlatFiles.SeparatedValueOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the separated value document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISeparatedValueTypeMapper`1.GetWriter(System.IO.TextWriter,FlatFiles.SeparatedValueOptions)">
            <summary>
            Gets a typed writer to write entities to the underlying document.
            </summary>
            <param name="writer">The writer over the fixed-length document.</param>
            <param name="options">The options controlling how the separated value document is written.</param>
            <returns>A typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISinglePropertyMapping">
            <summary>
            Represents the mapping from a type property to a float column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IStringPropertyMapping">
            <summary>
            Represents the mapping from a type property to a string column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.Trim(System.Boolean)">
            <summary>
            Sets whether the value should be trimmed.
            </summary>
            <param name="trim">True if the parsed value should be trimmed -or- false, if the value should be returned without modification.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ITypedReader`1">
            <summary>
             Represents a reader that will generate entities.
            </summary>
            <typeparam name="TEntity">The type of the entity being read.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.GetSchema">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.Read">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was read; otherwise, false if the end of file was reached.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.Skip">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if the end of the file was reached.</returns>
        </member>
        <member name="P:FlatFiles.TypeMapping.ITypedReader`1.Current">
            <summary>
            Gets the last read entity.
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.ITypedWriter`1">
            <summary>
            Represents a writer that will write entities.
            </summary>
            <typeparam name="TEntity">The type of the entity being written.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.GetSchema">
            <summary>
            Gets the schema being used by the writer to write record values.
            </summary>
            <returns>The schema being used by the writer.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.Write(`0)">
            <summary>
            Writes the given entity to the underlying document.
            </summary>
            <param name="entity">The entity to write.</param>
        </member>
        <member name="T:FlatFiles.TypeMapping.IUInt16PropertyMapping">
            <summary>
            Represents the mapping from a type property to an unsigned short column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IUInt32PropertyMapping">
            <summary>
            Represents the mapping from a type property to an unsigned int column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IUInt64PropertyMapping">
            <summary>
            Represents the mapping from a type property to a long column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.NullValue(System.String)">
            <summary>
            Sets the value to treat as null.
            </summary>
            <param name="value">The value to treat as null.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.NullHandler(FlatFiles.INullHandler)">
            <summary>
            Sets a custom handler for nulls.
            </summary>
            <param name="handler">The handler to use to recognize nulls.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Setting the handler to null with use the default handler.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
    </members>
</doc>
